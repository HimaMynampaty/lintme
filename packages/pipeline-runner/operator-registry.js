export const OPERATORS = {
  'generateAST':        () => import('../operators/generate-ast/index.js').then(m => m.run),
  'extract':            () => import('../operators/extract/index.js').then(m => m.run),
  'count':              () => import('../operators/count/index.js').then(m => m.run),
  'threshold':          () => import('../operators/threshold/index.js').then(m => m.run),
  'isPresent':          () => import('../operators/isPresent/index.js').then(m => m.run),
  'regexMatch':         () => import('../operators/regexMatch/index.js').then(m => m.run),
  'sage':               () => import('../operators/sage/index.js').then(m => m.run),
  'compare':            () => import('../operators/compare/index.js').then(m => m.run),
  'length':             () => import('../operators/length/index.js').then(m => m.run),
  'search':             () => import('../operators/search/index.js').then(m => m.run),
  'fixUsingLLM':        () => import('../operators/fixUsingLLM/index.js').then(m => m.run),
  'detectHateSpeech':   () => import('../operators/detectHateSpeech/index.js').then(m => m.run),
  'fetchFromGithub': () => import('../operators/fetchFromGithub/index.js').then(m => m.run),
  'readmeLocationCheck': () => import('../operators/readmeLocationCheck/index.js').then(m => m.run),
  'markdownRender': () => import('../operators/markdownRender/index.js').then(m => m.run),
  'calculateContrast': () => import('../operators/calculateContrast/index.js').then(m => m.run),
  'customCode': () => import('../operators/customCode/index.js').then(m => m.run),
  'detectDuplicateSentences': () => import('../operators/detectDuplicateSentences/index.js').then(m => m.run),
  'evaluateUsingLLM':        () => import('../operators/evaluateUsingLLM/index.js').then(m => m.run),
  'codeBlockFormatting':        () => import('../operators/codeBlockFormatting/index.js').then(m => m.run),
  'isLinkAlive':        () => import('../operators/isLinkAlive/index.js').then(m => m.run),
  'execute':        () => import('../operators/execute/index.js').then(m => m.run),
};
