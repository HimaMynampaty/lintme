{
  "label": "Extract",
  "description": "Finds Markdown nodes or text matches (including built-ins like emoji/newline/date and regex patterns) and returns them grouped by requested scopes.",
  "rationale": "Provides a flexible foundation for downstream operators by isolating exactly what to analyze (nodes, links, regex hits) and where (line/paragraph/document/EOF).",
  "improves": [
    "measurability",
    "structure",
    "consistency",
    "filtering"
  ],
  "version": "1.0.0",
  "usedByRules": [
    "checkBackToTopLinkPresence",
    "codeBlockLanguageCheck",
    "consistentExternalLinkFormat",
    "consistentHeadingFormat",
    "consistentListFormat",
    "dateValidationLint",
    "demoLinkRequiredLint",
    "disallowConsecutiveDuplicateWords",
    "enforceEmojiLimit",
    "enforceNewLineAtEOF",
    "minimumReadmeLength",
    "noUnreachableLinks",
    "quickStartSectionCheck",
    "requireAltTextForImages",
    "richContentCheck",
    "sentenceLengthLimit",
    "tableOfContentsCheck",
    "textContrastCompliance",
    "validateInlineCommands",
    "validateInternalLinksToHeadings",
    "validateLinkFormatting"
  ],
  "fields": {
    "target": {
      "type": "string",
      "description": "What to extract. May be a known mdast node, a special link category (internal/external), a built-in token (emoji/newline/date), or a regex-like pattern (e.g., /foo|bar/ or .foo.).",
      "oneOf": [
        {
          "enum": [
            "emoji",
            "newline",
            "image",
            "internallink",
            "externallink",
            "blockquote",
            "thematicBreak",
            "code",
            "definition",
            "delete",
            "emphasis",
            "footnoteDefinition",
            "footnoteReference",
            "heading",
            "html",
            "imageReference",
            "inlineCode",
            "link",
            "linkReference",
            "list",
            "listItem",
            "paragraph",
            "root",
            "strong",
            "table",
            "tableCell",
            "tableRow",
            "text",
            "toml",
            "yaml",
            "date"
          ]
        },
        {
          "type": "string",
          "description": "Regex-like selector. Must start and end with '.' or '/', e.g. \"/\\\\bTODO\\\\b/\" or \".secret.\"",
          "pattern": "^[./].*[./]$"
        }
      ]
    },
    "scopes": {
      "type": "array",
      "description": "Where to extract from.",
      "items": {
        "type": "string",
        "enum": [
          "line",
          "paragraph",
          "document",
          "endoffile"
        ]
      },
      "minItems": 1,
      "uniqueItems": true
    }
  },
  "additionalProperties": false,
  "produces": {
    "target": "(the requested target)",
    "scopes": [
      "line",
      "paragraph",
      "document",
      "endoffile"
    ],
    "contextWrites": [
      "ctx.extracted",
      "ctx.diagnostics"
    ]
  },
  "example": {
    "operator": "extract",
    "target": "heading",
    "scopes": [
      "document"
    ]
  }
}